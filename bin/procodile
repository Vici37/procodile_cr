#!/usr/bin/env ruby

trap("INT") { puts; exit 1 }

ORIGINAL_ARGV = ARGV.join(" ")

$:.unshift(File.expand_path("../lib", __dir__))

require "optparse"
require "fileutils"
require "yaml"
require "procodile"
require "procodile/version"
require "procodile/error"
require "procodile/config"
require "procodile/cli"

Thread.abort_on_exception = true

command = ARGV[0] || "help"
cli = Procodile::CLI.new

options = {}

begin
  OptionParser.new do |opts|
    opts.version = Procodile::VERSION
    opts.banner = "Usage: procodile #{command} [options]"

    opts.on("-r", "--root PATH", "The path to the root of your application") do |root|
      options[:root] = root
    end

    opts.on("--procfile PATH", "The path to the Procfile (defaults to: Procfile)") do |path|
      options[:procfile] = path
    end

    if cli.class.commands[command.to_sym] && option_block = cli.class.commands[command.to_sym][:options]
      option_block.call(opts, cli)
    end
  end.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  warn "Error: #{e.message}".color(31)
  exit 1
end

# Get the global configuration file data
global_config_path = ENV["PROCODILE_CONFIG"] || "Procfile.options.global"
if File.file?(global_config_path)
  global_config = YAML.load_file(global_config_path)
else
  global_config = {}
end

# Create a determination to work out where we want to load our app from
require "procodile/app_determination"
ap = Procodile::AppDetermination.new(FileUtils.pwd, options[:root], options[:procfile], global_config)
# if ap.unambiguous?
#   if ENV["PROCODILE_APP_ID"]
#     ap.set_app(ENV["PROCODILE_APP_ID"].to_i)
#   elsif ap.app_options.empty?
#     warn "Error: Could not find Procfile in #{FileUtils.pwd}/Procfile".color(31)
#     exit 1
#   else
#     puts "There are multiple applications configured in #{global_config_path}"
#     puts "\e[45;37mChoose an application:\e[0m"
#     ap.app_options.each do |i, app|
#       col = i % 3
#       print "#{i+1}) #{app}"[0, 28].ljust(col == 2 ? 0 : 30, " ")
#       if col == 2 || i == ap.app_options.size - 1
#         puts
#       end
#     end

#     app_id = STDIN.gets.strip.to_i - 1
#     if ap.app_options[app_id]
#       ap.set_app(app_id)
#     else
#       puts "Invalid app number: #{app_id + 1}"
#       exit 1
#     end
#   end
# end

begin
  if command != "help"
    cli.config = Procodile::Config.new(ap.root, ap.procfile)
    if cli.config.user && ENV["USER"] != cli.config.user
      warn "\e[31mProcodile must be run as #{cli.config.user}. Re-executing as #{cli.config.user}...\e[0m"
      exec("sudo -H -u #{cli.config.user} -- #{$0} #{ORIGINAL_ARGV}")
    end
  end

  cli.dispatch(command)
rescue Procodile::Error => e
  warn "Error: #{e.message}".color(31)
  exit 1
end
