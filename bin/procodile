#!/usr/bin/env ruby

require 'yaml'
global_config_path = ENV['PROCODILE_CONFIG'] || "/etc/procodile"
if File.exist?(global_config_path)
  global_config = YAML.load_file(global_config_path)
else
  global_config = {}
end

if global_config['user'] && ENV['USER'] != global_config['user']
  if global_config['user_reexec']
    $stderr.puts "\e[31mProcodile must be run as #{global_config['user']}. Re-executing as #{global_config['user']}...\e[0m"
    exec "sudo -u #{global_config['user']} -- #{$0} #{ARGV.join(' ')}"
  else
    $stderr.puts "\e[31mError: Procodile must be run as #{global_config['user']}\e[0m"
    exit 1
  end
end

$:.unshift(File.expand_path('../../lib', __FILE__))
require 'optparse'
require 'fileutils'
require 'procodile'
require 'procodile/version'
require 'procodile/error'
require 'procodile/config'
require 'procodile/cli'

Thread.abort_on_exception = true

command = ARGV[0] || 'help'
cli = Procodile::CLI.new

options = {}
begin
  OptionParser.new do |opts|
    opts.version = Procodile::VERSION
    opts.banner = "Usage: procodile #{command} [options]"
    opts.on("-r", "--root PATH", "The path to the root of your application") do |root|
      options[:root] = root
    end

    opts.on("-e", "--environment NAME", "The config environment to use") do |name|
      options[:environment] = name
    end

    if cli.class.commands[command.to_sym] && option_block = cli.class.commands[command.to_sym][:options]
      option_block.call(opts, cli)
    end
  end.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  $stderr.puts "Error: #{e.message}".color(31)
  exit 1
end

begin
  if command != 'help'
    cli.config = Procodile::Config.new(options[:root] ? File.expand_path(options[:root]) : global_config['root'] || FileUtils.pwd, options[:environment])
  end
  cli.run(command)
rescue Procodile::Error => e
  $stderr.puts "Error: #{e.message}".color(31)
  exit 1
end
