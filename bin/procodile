#!/usr/bin/env ruby
require 'optparse'

command = ARGV[0]

options = {}
begin
  OptionParser.new do |opts|
    opts.banner = "Usage: procodile [command] [options]"
    opts.on("-r", "--root PATH", "The path to the root of your application") do |root|
      options[:root] = root
    end

    if command == 'start'
      opts.on("-f", "--foreground", "Run the supervisor in the foreground") do
        options[:foreground] = true
      end

      opts.on("--clean", "Remove all previous pid and sock files before starting") do
        options[:clean] = true
      end
    end

    if ['start', 'stop', 'restart'].include?(command)
      opts.on("-p", "--processes a,b,c", "Only #{command} the listed processes or process types") do |processes|
        options[:processes] = processes
      end
    end
  end.parse!
rescue OptionParser::InvalidOption => e
  $stderr.puts "\e[31merror: #{e.message}\e[0m"
  exit 1
end

$:.unshift(File.expand_path('../../lib', __FILE__))

require 'fileutils'
require 'procodile/error'
require 'procodile/config'
require 'procodile/cli'

Thread.abort_on_exception = true
begin
  config = Procodile::Config.new(options[:root] ? File.expand_path(options[:root]) : FileUtils.pwd)
  cli = Procodile::CLI.new(config, options)
  cli.run(command)
rescue Procodile::Error => e
  $stderr.puts "\e[31merror: #{e.message}\e[0m"
  exit 1
end
