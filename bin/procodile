#!/usr/bin/env ruby

trap("INT") { puts ; exit 1 }

ORIGINAL_ARGV = ARGV.join(' ')

$:.unshift(File.expand_path('../../lib', __FILE__))

require 'optparse'
require 'fileutils'
require 'yaml'
require 'procodile'
require 'procodile/version'
require 'procodile/error'
require 'procodile/config'
require 'procodile/cli'

Thread.abort_on_exception = true

command = ARGV[0] || 'help'
cli = Procodile::CLI.new

options = {}
begin
  OptionParser.new do |opts|
    opts.version = Procodile::VERSION
    opts.banner = "Usage: procodile #{command} [options]"
    opts.on("-r", "--root PATH", "The path to the root of your application") do |root|
      options[:root] = root
    end

    opts.on("-e", "--environment NAME", "The config environment to use") do |name|
      options[:environment] = name
    end

    opts.on("--procfile PATH", "The path to the Procfile (defaults to: Procfile)") do |path|
      options[:procfile] = path
    end

    if cli.class.commands[command.to_sym] && option_block = cli.class.commands[command.to_sym][:options]
      option_block.call(opts, cli)
    end
  end.parse!
rescue OptionParser::InvalidOption, OptionParser::MissingArgument => e
  $stderr.puts "Error: #{e.message}".color(31)
  exit 1
end


# Get the global configuration file data
global_config_path = ENV['PROCODILE_CONFIG'] || "/etc/procodile"
if File.file?(global_config_path)
  global_config = YAML.load_file(global_config_path)
else
  global_config = {}
end

# Create a determination to work out where we want to load our app from
require 'procodile/app_determination'
ap = Procodile::AppDetermination.new(FileUtils.pwd, options[:root], options[:procfile], options[:environment], global_config)
if ap.ambiguous?
  if ENV['PROCODILE_APP_ID']
    ap.set_app(ENV['PROCODILE_APP_ID'].to_i)
  elsif ap.app_options.empty?
    $stderr.puts "Error: Could not find procodile in #{FileUtils.pwd}/Procfile".color(31)
    exit 1
  else
    puts "There are multiple applications configured in #{global_config_path}"
    puts "\e[45;37mChoose an application:\e[0m"
    ap.app_options.each do |i, app|
      col = i % 3
      print "#{(i+1)}) #{app}"[0,28].ljust(col != 2 ? 30 : 0, ' ')
      if col == 2 || i == ap.app_options.size - 1
        puts
      end
    end

    app_id = STDIN.gets.strip.to_i - 1
    if ap.app_options[app_id]
      ap.set_app(app_id)
    else
      puts "Invalid app number: #{app_id + 1}"
      exit 1
    end
  end
end

if ap.user && ENV['USER'] != ap.user
  if global_config['user_reexec']
    $stderr.puts "\e[31mProcodile must be run as #{ap.user}. Re-executing as #{ap.user}...\e[0m"
    exec("sudo -E -u #{ap.user} -- #{$0} #{ORIGINAL_ARGV}")
  else
    $stderr.puts "\e[31mError: Procodile must be run as #{ap.user}\e[0m"
    exit 1
  end
end

begin
  if command != 'help'
    cli.config = Procodile::Config.new(ap.root, ap.environment, ap.procfile)
  end
  cli.dispatch(command)
rescue Procodile::Error => e
  $stderr.puts "Error: #{e.message}".color(31)
  exit 1
end
